using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using TalkBuddy.Common.Enums;
using TalkBuddy.Common.Helpers;
using TalkBuddy.DAL.Interfaces;
using TalkBuddy.Domain.Entities;
using TalkBuddy.Service.Constants;
using TalkBuddy.Service.Interfaces;
using TalkBuddy.Service.Models.Requests;
using TalkBuddy.Service.Models.Responses;

namespace TalkBuddy.Service.Implementations
{
    public class FacebookOAuthService : IFacebookOAuthService
	{
        private readonly IClientRepository _clientRepo;
        private readonly IUnitOfWork _unitOfWork;

        public FacebookOAuthService(IClientRepository clientRepo, IUnitOfWork unitOfWork)
        {
            _clientRepo = clientRepo;
            _unitOfWork = unitOfWork;
        }

        public async Task<Client?> ContinueWithFacebookAsync(FacebookOAuthRequest request)
		{
            var httpClient = new HttpClient();
            var requestParams = new Dictionary<string, string>
            {
                { FacebookOAuthConstants.FIELDS, string.Join(',', FacebookOAuthConstants.ID, FacebookOAuthConstants.NAME, FacebookOAuthConstants.EMAIL) },
                { FacebookOAuthConstants.ACCESS_TOKEN, request.AccessToken }
            };

            var content = new FormUrlEncodedContent(requestParams);
            var response = await httpClient.PostAsync(FacebookOAuthConstants.FACEBOOK_GRAPH_API_URL, content);
            if (!response.IsSuccessStatusCode)
                throw new Exception(response.ReasonPhrase);

            var authResponse = JsonConvert.DeserializeObject<FacebookAuthResponse>(await response.Content.ReadAsStringAsync());
            if (authResponse?.Email == null)
                throw new Exception("Can not access user's email");

            var client = await (await _clientRepo.FindAsync(c => c.Email == authResponse.Email)).FirstOrDefaultAsync() ?? await CreateNewClientAsync(authResponse.Email, authResponse.Name);

            return client;
        }


        private async Task<Client> CreateNewClientAsync(string email, string userName)
        {
            var autoGeneratedPassword = RandomPasswordHelper.GenerateRandomPassword(10);
            var client = new Client
            {
                Email = email,
                Name = userName,
                Password = autoGeneratedPassword,
                Gender = "N/A",
                IsVerified = true,
                IsAccountSuspended = false,
                Role = UserRole.CLIENT
            };

            await _clientRepo.AddAsync(client);
            await _unitOfWork.CommitAsync();

            return client;
        }
    }
}
