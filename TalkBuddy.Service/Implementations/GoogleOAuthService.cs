using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System.IdentityModel.Tokens.Jwt;
using System.Net;
using TalkBuddy.Common.Extensions;
using TalkBuddy.Common.Helpers;
using TalkBuddy.DAL.Interfaces;
using TalkBuddy.Domain.Entities;
using TalkBuddy.Service.Constants;
using TalkBuddy.Service.Interfaces;
using TalkBuddy.Service.Models.Requests;
using TalkBuddy.Service.Models.Responses;
using TalkBuddy.Service.Settings;

namespace TalkBuddy.Service.Implementations
{
    public class GoogleOAuthService : IGoogleOAuthService
    {
        private readonly IClientRepository _clientRepo;
        private readonly IConfiguration _configuration;
        private readonly IUnitOfWork _unitOfWork;

        public GoogleOAuthService(IClientRepository clientRepo, IConfiguration configuration, IUnitOfWork unitOfWork)
        {
            _clientRepo = clientRepo;
            _configuration = configuration;
            _unitOfWork = unitOfWork;
        }

        public async Task<Client?> ContinueWithGoogleAsync(GoogleOAuthRequest request)
        {
            var googleSettings = _configuration.GetSection(nameof(GoogleSettings)).Get<GoogleSettings>() ?? throw new Exception("Google settings are missing");

            var httpClient = new HttpClient();
            var code = WebUtility.UrlDecode(request.Code);
            var requestParams = new Dictionary<string, string>
            {
                { GoogleOAuthConstants.CODE, code },
                { GoogleOAuthConstants.CLIENT_ID, googleSettings.ClientId },
                { GoogleOAuthConstants.CLIENT_SECRET, googleSettings.ClientSecret },
                { GoogleOAuthConstants.REDIRECT_URI, googleSettings.RedirectUri },
                { GoogleOAuthConstants.GRANT_TYPE, GoogleOAuthConstants.AUTHORIZATION_CODE }
            };

            var content = new FormUrlEncodedContent(requestParams);
            var response = await httpClient.PostAsync(GoogleOAuthConstants.GOOGLE_TOKEN_URL, content);
            if (!response.IsSuccessStatusCode)
                throw new Exception("Token is invalid");

            var authObject = JsonConvert.DeserializeObject<GoogleAuthResponse>(await response.Content.ReadAsStringAsync());
            if (authObject?.IdToken == null)
                throw new Exception("Id token cannot be null");

            var handler = new JwtSecurityTokenHandler();
            var securityToken = handler.ReadJwtToken(authObject.IdToken);
            securityToken.Claims.TryGetValue(GoogleTokenClaimConstants.EMAIL, out var email);
            securityToken.Claims.TryGetValue(GoogleTokenClaimConstants.EMAIL_VERIFIED, out var emailVerified);
            securityToken.Claims.TryGetValue(GoogleTokenClaimConstants.GIVEN_NAME, out var name);
            securityToken.Claims.TryGetValue(GoogleTokenClaimConstants.PICTURE, out var picture);

            var client = await (await _clientRepo.FindAsync(c => c.Email == email)).FirstOrDefaultAsync() ?? await CreateNewClientAsync(email, emailVerified, name, picture);
            return client;
        }

        private async Task<Client> CreateNewClientAsync(string email, string emailVerified, string fullName, string picture)
        {
            var autoGeneratedPassword = RandomPasswordHelper.GenerateRandomPassword(10);
            var client = new Client
            {
                Email = email,
                Name = fullName,
                ProfilePicture = picture,
                Password = autoGeneratedPassword,
                Gender = "N/A"
            };

            await _clientRepo.AddAsync(client);
            await _unitOfWork.CommitAsync();

            //var emailRequest = new PasswordEmail()
            //{
            //    To = user.Email,
            //    UserName = user.UserName,
            //    Subject = "PASSWORD CONFIRM EMAIL",
            //    Password = autoGeneratedPassword
            //};
            //_emailService.SendEmail(emailRequest);

            return client;
        }
    }
}
