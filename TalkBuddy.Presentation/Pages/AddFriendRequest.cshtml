@page
@using TalkBuddy.Domain.Entities
@using TalkBuddy.Presentation.Components
@model TalkBuddy.Presentation.Pages.AddFriendRequest

<style></style>

@{
    var invitationList = TempData["invitationList"] as IEnumerable<Friendship> ?? new List<Friendship>();
}

<link rel="stylesheet" href="~/css/header.css">

<section style="background-color: #e4e7f5; height: 100%">
    <component type="typeof(Header)" render-mode="Static"/>
    <div class="d-flex justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card form-bg-color border h-50vh">
                <div class="card-body ">
                    <h5 class="card-title">Friend Invitations</h5>
                    @if (!invitationList.Any())
                    {
                        <p>There is no invitations</p>
                    }
                    <ul class="w-100 p-0" id="friendList">
                        @foreach (var x in invitationList)
                        {
                            <li class="w-100 d-flex justify-content-between align-items-center">
                                <div class="d-flex gap-1 justify-content-center align-items-center">
                                    @if (string.IsNullOrEmpty(x.Sender.ProfilePicture))
                                    {
                                        <img width="34" height="34" src="~/default-avatar.png" alt="Default avatar"/>
                                    }
                                    else
                                    {
                                        <img width="34" height="34" src="@x.Sender.ProfilePicture" alt="Sender avatar"/>
                                    }
                                    <div class="d-flex flex-column justify-content-center align-items-start">
                                        <p class="m-0">@x.Sender.Name</p>
                                        <small style="font-size: 0.7rem">From @x.RequestDate</small>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-center align-items-center gap-2">
                                    <form>
                                        <input type="hidden" id="FriendShipId" value="@x.Id"/>
                                        <input type="hidden" id="SenderId" value="@x.SenderID"/>
                                        <input type="hidden" id="ReceiverId" value="@x.ReceiverId"/>
                                        <button type="button" onclick="acceptInvitation()" class="btn btn-primary">
                                            <i class="fa-solid fa-check"></i>
                                        </button>
                                    </form>
                                    <form >
                                        <input type="hidden" id="FriendShipId" value="@x.Id"/>
                                        <input type="hidden" id="SenderId" value="@x.SenderID"/>
                                        <input type="hidden" id="ReceiverId" value="@x.ReceiverId"/>
                                        <button type="button" onclick="rejectInvitation()" class="btn btn-primary">
                                            <i class="fa-solid fa-xmark"></i>
                                        </button>
                                    </form>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
<<<<<<< HEAD

</section>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
var connection = new signalR.HubConnectionBuilder().withUrl("/notification").build();
    connection.start().then(function () {
        console.log("Connection started");
    }).catch(function (err) {
        return console.error(err.toString());
    });
=======
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
var connection = new signalR.HubConnectionBuilder().withUrl("/notification").build();
    connection.start().then(function () {
        console.log("Connection started");
    }).catch(function (err) {
        return console.error(err.toString());
    });

>>>>>>> 8a3e987 ([Notification][Hai] update handle show notifications and read notifications)
    connection.on("ReceiveNotification", (notifications, connectionId) => {
        console.log("Received notification: ", notifications);
        console.log("connection id",connectionId);
    });
<<<<<<< HEAD
=======

>>>>>>> 8a3e987 ([Notification][Hai] update handle show notifications and read notifications)
   
    
    function acceptInvitation(){
        var friendshipId = document.getElementById("FriendShipId").value;
        var senderId = document.getElementById("SenderId").value;
        var receiverId = document.getElementById("ReceiverId").value;
        console.log("hit accept button");
        connection.invoke("HandleAccept",friendshipId,senderId,receiverId).then(()=>{
            location.href = "/AddFriendPage"
        }).catch(error => console.log(error.toString()))
       
    }
    function rejectInvitation(){
        var friendshipId = document.getElementById("FriendShipId").value;
        var senderId = document.getElementById("SenderId").value;
        var receiverId = document.getElementById("ReceiverId").value;
        connection.invoke("HandleReject",friendshipId,senderId,receiverId)
        location.href="/AddFriendPage"
    }
    
</script>