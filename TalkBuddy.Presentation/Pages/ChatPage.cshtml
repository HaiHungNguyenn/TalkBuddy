@page
@using TalkBuddy.Presentation.Components
@model TalkBuddy.Presentation.Pages.ChatPage

<link rel="stylesheet" href="~/css/header.css" />
<link rel="stylesheet" href="~/css/chatPage.css" />
<style>
    #dropdowntranfer .btn {
        border: none; /* Remove border */
        background-color: white; /* Set background to white */
    }

    .dropdown-menu-end {
        right: 0; /* Align dropdown to the right */
    }

    .client-row.row {
        display: flex;
        align-items: center;
    }

    .client-remove-button {
        margin-left: auto; /* This pushes the button to the end of the row */
    }

    #chatBoxtList {
        max-height: 65dvh;
        justify-content: start !important;
        overflow: hidden scroll;
    }

</style>
<section class="h-100 d-flex flex-column justify-content-start align-items-center">
    <component type="typeof(Header)" render-mode="Static" />
    <div class="w-100 h-100 chat-container">
        <div class="chat-layout">
            <div class="left-container">
                <form method="post" class="search-chatbox-form">
                    <input class="rounded-3" type="text" placeholder="Search for conversation..." id="searchChatInput" />
                    <button type="submit" class="search-btn" id="searchChatButon" onclick="searchChatButtonClickHandler(event)">
                        <i class="fa-solid fa-magnifying-glass search-icon"></i>
                    </button>
                </form>
                <div class="w-100">
                    <ul id="chatBoxtList"></ul>
                </div>
            </div>
            <div class="chat-window">
                <div class="chat-header" id="chat-title">
                </div>

                <ul id="messages"></ul>
                <div class="chat-footer">
                    <input placeholder="Type your message here" id="messageInput" />
                    <div id="sendButton">
                        <button id="sendMessageButton">
                            <i class="fa-solid fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<dialog id="show-clients-dialog">
    <div class="row dialog-header">
        <div class="col-2"></div>
        <h2 class="dialog-title col-8">Members</h2>
        <button class="close-btn btn col-2" onclick="this.parentElement.parentElement.close()">&#10005;</button>
    </div>

    <div class="btn-row row">
        <button class="col-2 show-client-btn btn-active">All</button>
        <button class="col-2 show-client-btn">Media</button>
    </div>
    <div class="modal-body-dialog">

        <div class="client-row row">
            <img class="client-avatar-dialog col-3 rounded-circle" src="/default-avatar.png" />
            <span class="client-name-dialog col-7">Tri</span>
        </div>
        <div class="client-row row">
            <img class="client-avatar-dialog col-3 rounded-circle" src="/default-avatar.png" />
            <span class="client-name-dialog col-7">Hai</span>
        </div>
    </div>


    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to remove this client from the chat box?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmRemove">Remove</button>
                </div>
            </div>
        </div>
    </div>

    <form method="dialog">
    </form>
</dialog>
<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chat").build();

    connection.on("ReceiveMessage", function (user, message) {
        console.log('username is', user);
        document.getElementById("messages").appendChild(convertMessageToListItem(message));
        scrollMessagesToBottom();
    });

    connection.start().then(function () {
        console.log("SignalR Connected");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById('messageInput').addEventListener('keyup', (e) => {
        if (e.key == 'Enter')
            document.getElementById('sendMessageButton').click();
    });

    connection.on("InitializeChat", function (chatBoxes) {

        document.getElementById("chatBoxtList").innerHTML = "";
        chatBoxes.forEach(function (chatBox) {
            var li = document.createElement("li");

            console.log(chatBox.ChatBoxName);
            // Create the image element
            var img = document.createElement("img");
            img.src = chatBox.chatBoxAvatar ?? "/default-avatar.png";
            img.className = "avatar";

            // Create the span element for the text
            var span = document.createElement("span");
            span.className = "fs-5 fw-semibold";
            span.innerHTML = chatBox.chatBoxName;

            // Append the elements to construct the HTML structure

            li.appendChild(img);
            li.appendChild(span);
            li.addEventListener("click", function () {
                requestMessagesForChatBox(chatBox);
            });
            var chatHeader = document.getElementById("chat-title");
            var messagesList = document.getElementById("messages");
            chatHeader.innerHTML = "Please choose chat to start conversation!";
            messagesList.innerHTML = ""
            const button = document.getElementById("sendButton").style.display = 'none';

            var inputMes = document.getElementById("messageInput").style.display = 'none';

            // Append the list item to the chat box list

            document.getElementById("chatBoxtList").appendChild(li);
        });
    });


    function sendButtonClickHandler(event) {
        var chatBoxId = document.getElementById("sendButton").getAttribute("data-chatBoxId");
        var message = document.getElementById("messageInput").value;

        if (message !== "") { // Check if message is not empty
            connection.invoke("SendMessage", chatBoxId, message).catch(function (err) {
                return console.error(err.toString());
            });
        }

        document.getElementById("messageInput").value = "";
        event.preventDefault();
    }

    //search for chatbox
    function searchChatButtonClickHandler(event) {

        var searchString = document.getElementById("searchChatInput").value;
        connection.invoke("SearchByChatBoxName", searchString).catch(function (err) {
            return console.error(err.toString());
        });
        document.getElementById("searchChatInput").value = "";
        event.preventDefault();
    }

    connection.on("UpdateMessagesForChatBox", function (chatBox) {
        console.log('debug in update message');
        requestMessagesForChatBox(chatBox)
    });

    function requestMessagesForChatBox(chatBox) {

        var chatHeader = document.getElementById("chat-title");
        chatHeader.innerHTML = "";
        var img = document.createElement("img");
        img.src = chatBox.chatBoxAvatar ?? "/default-avatar.png";
        img.className = "avatar show-clients";
        // Create the span element for the text
        var span = document.createElement("span");
        span.className = "fs-5 fw-semibold";
        span.innerHTML = chatBox.chatBoxName;

        document.getElementById("sendButton").style.display = 'block';
        document.getElementById("messageInput").style.display = 'block';
        // Append the elements to construct the HTML structure
        chatHeader.appendChild(img);
        chatHeader.appendChild(span);

        if (chatBox.chatBoxType.toLowerCase() === "group" && !chatBox.isLeft) {

            var buttonEdit = document.createElement("button");
            buttonEdit.className = "btn btn-primary";
            var iEdit = document.createElement("i");
            iEdit.className = "fas fa-pen";
            buttonEdit.appendChild(iEdit);
            chatHeader.appendChild(buttonEdit);


            //add person to group chat

            var buttonAdd = document.createElement("button");
            buttonAdd.className = "btn btn-primary";
            var iAdd = document.createElement("i");
            iAdd.className = "fas fa-user-plus";
            buttonAdd.appendChild(iAdd);
            chatHeader.appendChild(buttonAdd);
            buttonAdd.addEventListener("click", function () {
                connection.invoke("GetFriendsListNotInChat", chatBox.chatBoxId).catch(function (err) {
                    return console.error(err.toString());
                });

            });
            //out group chat
            var button = document.createElement("button");
            button.className = "btn btn-primary";
            var i = document.createElement("i");
            i.className = "fas fa-sign-out-alt";
            button.appendChild(i);
            chatHeader.appendChild(button);


            //modify name

            buttonEdit.addEventListener("click", function () {
                var input = document.createElement("input");
                input.type = "text";
                input.className = "fs-5 fw-semibold";
                console.log('debug in change name ' + chatBox.chatBoxName);
                input.value = span.innerHTML.trim();
                chatHeader.replaceChild(input, span);

                // Add event listener to handle blur event (when input loses focus)
                input.addEventListener("blur", function () {
                    // Replace the input element with a new span element
                    if (input.value !== "") {
                        if (input.value.length > 50) {
                            alert("Name of chat box is too long");
                            return;
                        }
                        if (input.value.trim() !== span.innerHTML.trim()) {
                            connection.invoke("ChangeChatBoxName", chatBox.chatBoxId, input.value.trim()).catch(function (err) {
                                return console.error(err.toString());
                            });
                            span.innerHTML = input.value.trim();
                        }

                        chatHeader.replaceChild(span, input);

                    }
                    buttonEdit.style.display = "block";
                });

                // Hide the button
                buttonEdit.style.display = "none";

            });
            if (chatBox.isModerator) {
                button.addEventListener("click", function () {
                    alert("Please change the leader group role to another person before out group");
                });

                var buttonDelete = document.createElement("button");
                buttonDelete.className = "btn btn-danger";
                var iDelete = document.createElement("i");
                iDelete.className = "fas fa-trash-alt";
                buttonDelete.appendChild(iDelete);
                chatHeader.appendChild(buttonDelete);

                buttonDelete.addEventListener("click", function () {
                    // Display a confirmation dialog
                    var confirmDelete = confirm("Are you sure you want to delete the group chat?");
                    if (confirmDelete) {
                        connection.invoke("DeleteGroupChat", chatBox.chatBoxId).catch(function (err) {
                            return console.error(err.toString());
                        });
                    } else {
                        // If user cancels, do nothing
                        console.log('Deletion canceled');
                    }
                });
                var dropdown = document.createElement("div");
                dropdown.innerHTML = `
                <div class="dropdown" id="dropdowntranfer">
                    <button class="btn btn-secondary dropdown-toggle bg-white border-0" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-ellipsis-v" style="color: black;"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                        <li><a class="dropdown-item" href="#" id="dropdownItem">Transfer group leader position for another person</a></li>
                    </ul>
                </div>
            `;

                chatHeader.appendChild(dropdown);

                // Select the dropdown item by its ID
                var dropdownItem = document.getElementById("dropdownItem");

                // Add a click event listener to the dropdown item
                dropdownItem.addEventListener("click", function (event) {
                    connection.invoke("GetFriendsInChat", chatBox.chatBoxId).catch(function (err) {
                        return console.error(err.toString());
                    });
                    event.preventDefault();

                    // Add your logic here to handle the click event
                    console.log("Dropdown item clicked");
                });


            }
            else {
                button.addEventListener("click", function () {
                    connection.invoke("ExitGroupChat", chatBox.chatBoxId).catch(function (err) {
                        return console.error(err.toString());
                    });
                });
            }
        }

        connection.invoke("GetMessages", chatBox.chatBoxId).then(function (messages) {
            // Handle received messages
            displayMessages(messages);
        }).catch(function (err) {
            return console.error(err.toString());
        });

        if (!chatBox.isLeft) {
            const button = document.querySelector('#sendButton button');
            button.disabled = false;
            var inputMes = document.getElementById("messageInput");
            inputMes.value = '';
            inputMes.style.color = 'black';
            inputMes.disabled = false;
            // Remove the existing click event listener for the send button
            document.getElementById("sendButton").removeEventListener("click", sendButtonClickHandler);
            // Add a new click event listener for the send button
            document.getElementById("sendButton").addEventListener("click", sendButtonClickHandler);
            // Set the chatBoxId as a data attribute on the sendButton element
            document.getElementById("sendButton").setAttribute("data-chatBoxId", chatBox.chatBoxId);
            //Add click event to show clients in chat box
            const showClient = document.getElementsByClassName("show-clients")[0];
            const clientsDialog = document.getElementById("show-clients-dialog");
            showClient.addEventListener("click", () => {
                //check type of chat box
                console.log(chatBox);
                if (chatBox.chatBoxType == "TwoPerson") {
                    window.location.href = `/Profile?id=${chatBox.clientId}`
                }
                else {
                    clientsDialog.showModal();
                    connection.invoke("GetClientsOfChatBox", chatBox.chatBoxId).catch(function (err) {
                        return console.error(err.toString());
                    });
                }
            });
        } else {
            const button = document.querySelector('#sendButton button');
            // Disable the button
            button.disabled = true;
            var inputMes = document.getElementById("messageInput");
            if (chatBox.chatBoxType.toLowerCase() === "group") {
                inputMes.value = 'You are currently not a member of this group';
            } else {
                inputMes.value = 'You are currently not friends. Add friend to send messages';
            }
            inputMes.style.color = 'red';
            inputMes.disabled = true;
            console.log('diablebuton');
        }
    }


    // Function to display messages on the UI
    function displayMessages(messages) {
        var messagesList = document.getElementById("messages");
        messagesList.innerHTML = ""; // Clear previous messages

        // I created a function to render a single message instead of a list of messages
        // which may be easier to reuse
        messages.forEach(msg => messagesList.append(convertMessageToListItem(msg)));
        scrollMessagesToBottom();
    }

    function convertMessageToListItem(message) {
        // Create a new list item for each message
        const li = document.createElement("li");
        console.log(message.messageType);
        if (message.messageType == "Notification") {
            console.log('notification');
            li.innerHTML = `<p class="notification" style="align-items:center; color:darkblue; text-align:center">


                        ${message.content}</p>`;

        } else {
            message.isYourOwnMess && li.classList.add('self-msg');
            console.log('message');
            // add avatar, the image is a placeholder, replace the image's source with client's avatar
            const imgAvatar = document.createElement("img");
            imgAvatar.src = message.senderAvatar || '/default-avatar.png';
            imgAvatar.alt = "User avatar";
            imgAvatar.height = 40;
            imgAvatar.width = 40;
            imgAvatar.classList.add("rounded-circle", "chat-client-avatar");

            const divAvatarContainer = document.createElement('div');
            if (!message.isYourOwnMess) {
                var avatarId = uuidv4();
                imgAvatar.addEventListener('mouseenter', () => {
                    const divClientName = document.getElementById(avatarId);
                    divClientName.style.visibility = 'visible';
                });
                imgAvatar.addEventListener('mouseleave', () => {
                    const divClientName = document.getElementById(avatarId);
                    divClientName.style.visibility = 'hidden';
                });

                divAvatarContainer.innerHTML = `
                                                        <span class="position-absolute chat-client-name" id=${avatarId}>${message.senderName}</span>
                                                    `;
            }
            divAvatarContainer.appendChild(imgAvatar);
            divAvatarContainer.classList.add("position-relative");

            const spanMessageContent = document.createElement("span");
            spanMessageContent.textContent = message.content;

            const smallTime = document.createElement("small");
            smallTime.textContent = new Date(message.sentDate).toLocaleTimeString();
            smallTime.classList.add("align-self-end");

            // this element should be a div, but I have to rewrite my css if I do so I decided to keep it as a span
            const spanContainer = document.createElement("span");
            spanContainer.classList.add("d-flex", "flex-column");
            spanContainer.appendChild(spanMessageContent);
            spanContainer.appendChild(smallTime);

            const dropDown = document.createElement("div");
            dropDown.classList.add("dropdown", "ml-3");
            dropDown.innerHTML = displayDropdownReportation(message.senderId, message.senderName);

            if (message.isYourOwnMess) {
                // message to the left, avatar to the right
                li.appendChild(spanContainer);
                //li.appendChild(imgAvatar);
                li.appendChild(divAvatarContainer);
            } else {
                // message to the right, avatar to the left
                li.appendChild(divAvatarContainer);
                //li.appendChild(imgAvatar);
                li.appendChild(spanContainer);
                li.appendChild(dropDown);
            }

            li.classList.add("d-flex", message.isYourOwnMess ? "justify-content-end" : "justify-content-start", "align-items-center", "gap-2");

        }
        return li;
    }

    //save client list
    let clientList = null;
    //show clients members for group chatbox
    connection.on("ShowClientsOfChatBox", (clients, chatBoxId, isLeader) => {
        console.log("isleader " + isLeader);
        displayClients(clients, chatBoxId, isLeader);
        clientList = clients;
    })
    function displayClients(clients, chatBoxId, isLeader) {
        const dialogBody = document.getElementsByClassName("modal-body-dialog")[0];
        let leaderExist = false;
        console.log(isLeader);
        dialogBody.innerHTML = "";
        clients.forEach((client) => {

            if (!leaderExist && client.inChatboxes[0].isModerator) {
                dialogBody.innerHTML += `
                        <div class="client-row row">
                            <a href="/Profile?id=${client.id}" class="col-3"><img class="client-avatar-dialog rounded-circle" src="${client.profilePicture ?? '/default-avatar.png'}"/></a>
                            <div class="client-name-dialog col-7">
                                <div>${client.name}</div>
                                <span class="leader-tag">Leader</span>
                            </div>
                        </div>
                        `;
                leaderExist = true;
                console.log("leader");
                return;
            }
            console.log("normal");
            if (isLeader) {
                dialogBody.innerHTML += `
                       <div class="client-row row">
                        <a href="/Profile?id=${client.id}" class="col-3"><img class="client-avatar-dialog rounded-circle" src="${client.profilePicture ?? '/default-avatar.png'}"/></a>
                        <div class="client-name-dialog col-5">
                            <div>${client.name}</div>
                        </div>
                        <div class="client-remove-button col-2">
                            <button class="btn btn-sm btn-danger remove-btn" data-bs-toggle="modal" data-bs-target="#confirmationModal" data-client-id="${client.id}" data-chatbox-id="${chatBoxId}">
                                <i class="fas fa-trash-alt"></i> <!-- Font Awesome trash icon -->
                            </button>
                        </div>
                    </div>
                    `;
                const modalInstance = new bootstrap.Modal(document.getElementById('confirmationModal'));
                // Add event listener for the "Remove" button
                document.querySelectorAll('.remove-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        // Get the client and chat box IDs from the button's data attributes
                        const clientId = this.getAttribute('data-client-id');
                        const chatBoxId = this.getAttribute('data-chatbox-id');

                        // Set the data attributes for the "Confirm Remove" button in the modal
                        document.getElementById('confirmRemove').setAttribute('data-client-id', clientId);
                        document.getElementById('confirmRemove').setAttribute('data-chatbox-id', chatBoxId);
                    });
                });

                // Add event listener for the "Confirm Remove" button in the modal
                document.getElementById('confirmRemove').addEventListener('click', function () {
                    const clientId = this.getAttribute('data-client-id');
                    const chatBoxId = this.getAttribute('data-chatbox-id');
                    removeClientFromChatBox(clientId, chatBoxId);
                    // Close the modal after clicking "Confirm Remove"

                    modalInstance.hide();
                });
               

            } else {
                dialogBody.innerHTML += `
                    <div class="client-row row">
                        <a href="/Profile?id=${client.id}" class="col-3"><img class="client-avatar-dialog rounded-circle" src="${client.profilePicture ?? '/default-avatar.png'}"/></a>
                        <div class="client-name-dialog col-5">
                            <div>${client.name}</div>
                        </div>
                    </div>`;
            }

        })

    }


    function removeClientFromChatBox(clientId, chatBoxId) {
        console.log(clientId + " " + chatBoxId);
        connection.invoke("RemoveClientFromChatBox", clientId, chatBoxId)
            .catch(function (err) {
                console.error(err.toString());
            });
    }

    const scrollMessagesToBottom = () => {
        const ulMessages = document.getElementById("messages");
        ulMessages.scrollTop = ulMessages.scrollHeight;
    }
    function displayDropdownReportation(userId, userName) {
        return `
                            <button class="btn bg-light border-0" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-h text-dark"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal_${userId}">
                                    <i class="fa-solid fa-flag text-dark"></i> Report this user!
                                </button>
                            </ul>
                            <div class="modal fade" id="exampleModal_${userId}" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h1 class="modal-title fs-5">Your Reportation ${userId}</h1>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <form id="reportForm_${userId}" >
                                                <input type="hidden" name="UserId" value="${userId}" />
                                                <div class="mb-3">
                                                    <label for="reported-name" class="col-form-label">Reported Person's Name:</label>
                                                    <input type="text" disabled class="form-control" value="${userName}">
                                                </div>
                                                <div class="mb-3">
                                                    <label for="reason" class="col-form-label">Reason for Report:</label>
                                                    <select class="form-select" id="reason" name="Detail">
                                                        <option selected>Select a reason</option>
                                                        <option value="Harassment">Harassment</option>
                                                        <option value="Spam">Spam</option>
                                                        <option value="Inappropriate Content">Inappropriate Content</option>
                                                    </select>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="evidence" class="col-form-label">Evidence (if any):</label>
                                                    <input type="file" class="form-control" id="fileInput" accept="image/*" name="image">
                                                </div>
                                                <button type="button" onclick="HandleReport('${userId}')" class="btn btn-primary">Send reportation</button>
                                            </form>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>`;
    }


    connection.on("showFriendsListModal", function (friends, chatBoxId) {
        // Here, you can create a modal or dropdown list to display the list of friends
        // Populate the modal or dropdown list with the fetched data
        // For example, you can create a Bootstrap modal:
        var modal = document.createElement('div');
        modal.className = 'modal';
        if (friends.length == 0) {
            modal.innerHTML = `
                                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">No friends to add</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body"> <!-- Corrected: Added closing double quote -->
                            <p>You have no friends to add to this chat box. All your friends already in chat.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>

                            `;
        } else {
            modal.innerHTML = `
                                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Select Friends</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form id="friendCheckboxForm">
                                                        <ul class="list-group">
                                                            ${friends.map(friend => `
                                                                <li class="list-group-item">
                                                                    <input type="checkbox" name="selectedFriends" value="${friend.id}" id="friend-${friend.id}">
                                                                    <label for="friend-${friend.id}">${friend.name}</label>
                                                                </li>
                                                            `).join('')}
                                                        </ul>
                                                    </form>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                    <button type="button" class="btn btn-primary">Add Selected Friend</button>
                                                </div>
                                            </div>
                                        </div>
                                                    `;
        }
        document.body.appendChild(modal);

        // Initialize the Bootstrap modal
        var modalInstance = new bootstrap.Modal(modal);
        modalInstance.show();

        // Handle the "Add Selected" button click event
        modal.querySelector('.btn-primary').addEventListener('click', function () {
            connection.invoke("AddPeopleToChatBox", getSelectedFriendsFromModal(), chatBoxId).catch(function (err) {
                return console.error(err.toString());
            });
            modalInstance.hide();
        });

        // Handle the modal dismissal event
        modal.addEventListener('hidden.bs.modal', function () {
            // Remove the modal from the DOM when it's closed
            modal.remove();
        });
    });

    function getSelectedFriendsFromModal() {
        // Get the form element containing the checkboxes
        var form = document.getElementById('friendCheckboxForm');

        // Initialize an array to store the IDs of selected friends
        var selectedFriends = [];

        // Iterate over each checkbox in the form
        var checkboxes = form.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(function (checkbox) {
            // Check if the checkbox is checked
            if (checkbox.checked) {
                // If checked, add the value (friend ID) to the selectedFriends array
                selectedFriends.push(checkbox.value);
            }
        });

        // Return the array of selected friend IDs
        return selectedFriends;
    }

    connection.on("showFriendsListModalLeader", function (friends, chatBoxId) {
        // Here, you can create a modal or dropdown list to display the list of friends
        // Populate the modal or dropdown list with the fetched data
        // For example, you can create a Bootstrap modal:
        var modal = document.createElement('div');
        modal.className = 'modal';
        if (friends.length == 0) {
            modal.innerHTML = `
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">No friends to add</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <p>Have no person in chat to choose.</p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    `;
        } else {
            modal.innerHTML = `
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Select a Friend</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="friendRadioForm">
                                        <ul class="list-group">
                                            ${friends.map(friend => `
                                                <li class="list-group-item">
                                                    <input type="radio" name="selectedFriend" value="${friend.id}" id="friend-${friend.id}">
                                                    <label for="friend-${friend.id}">${friend.name}</label>
                                                </li>
                                            `).join('')}
                                        </ul>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-primary">Tranfer leader position.</button>
                                </div>
                            </div>
                        </div>
                    `;
        }
        document.body.appendChild(modal);

        // Initialize the Bootstrap modal
        var modalInstance = new bootstrap.Modal(modal);
        modalInstance.show();

        // Handle the "Add Selected" button click event
        modal.querySelector('.btn-primary').addEventListener('click', function () {
            connection.invoke("TranferLeaderPosition", getSelectedLeaderFromModal(), chatBoxId).catch(function (err) {
                return console.error(err.toString());
            });
            modalInstance.hide();
        });

        // Handle the modal dismissal event
        modal.addEventListener('hidden.bs.modal', function () {
            // Remove the modal from the DOM when it's closed
            modal.remove();
        });
    });

    function getSelectedLeaderFromModal() {
        // Get the form element containing the radio buttons
        var form = document.getElementById('friendRadioForm');

        // Get the value of the selected radio button (the ID of the selected friend)
        var selectedFriendId = form.querySelector('input[name="selectedFriend"]:checked').value;

        // Return the ID of the selected friend
        return selectedFriendId;
    }
</script>
<script src="~/js/viewListClientsInChat.js" />

