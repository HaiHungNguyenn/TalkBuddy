@page
@using TalkBuddy.Presentation.Components
@model TalkBuddy.Presentation.Pages.ChatPage

<link rel="stylesheet" href="~/css/header.css"/>
<link rel="stylesheet" href="~/css/chatPage.css"/>

<section class="h-100 d-flex flex-column justify-content-start align-items-center">
    <!--<<<<<<< HEAD-->

    <component type="typeof(Header)" render-mode="Static"/>

<!--=======
    <div class="w-100 d-flex justify-content-between align-items-center py-3 px-5" style="background-color: #5e73e2;">
        <form method="post" class="search-form">
            <input type="text" placeholder="Type to search..." />
            <button type="submit" class="search-btn">
                <i class="fa-solid fa-magnifying-glass search-icon"></i>
            </button>
        </form>
         <div class="d-flex justify-content-between align-items-center gap-4">
            <div class="notification-container">
                <i onclick="showNotification()" class="fa-solid fa-bell add-icon text-white bell-icon"></i>
                <div id="notification" class="notification-box">
                    
                </div>
                <span id="unreadCount" class="badge bg-danger" style="transform: translateX(-31px) translateY(9px);
                                                                          border-radius: 25px;"></span>
            </div>
            <img class="rounded-circle" style="cursor: pointer;" width="40" height="40" src="default-avatar.png" alt="User avatar"/>
        </div>
    </div>
    >>>>>>> 8a3e9873fb4f0691b39bad03746b2dc9c286ca39-->
    <div class="w-100 h-100 chat-container">
        <div class="chat-layout">
            <div class="left-container">
                <form method="post" class="search-chatbox-form">
                    <input class="rounded-3" type="text" placeholder="Search for conversation..." id="searchChatInput"/>
                    <button type="submit" class="search-btn" id="searchChatButon" onclick="searchChatButtonClickHandler(event)">
                        <i class="fa-solid fa-magnifying-glass search-icon"></i>
                    </button>
                </form>
                <div class="w-100">
                    <ul id="chatBoxtList"></ul>
                </div>
            </div>
            <div class="chat-window">
                <div class="chat-header" id="chat-title"></div>

                <ul id="messages"></ul>
                <div class="chat-footer">
                    <input placeholder="Type your message here" id="messageInput"/>
                    <div id="sendButton">
                        <button>
                            <i class="fa-solid fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<dialog id="show-clients-dialog">
    <div class="row dialog-header">
        <div class="col-2"></div>
        <h2 class="dialog-title col-8">Members</h2>
        <button class="close-btn btn col-2" onclick="this.parentElement.parentElement.close()">&#10005;</button>
    </div>
    <div class="btn-row row p-4">
        <button class="btn btn-secondary">
            <i class="fas fa-user-friends"></i>
            <span>Add member</span>
        </button>
    </div>
    <div class="btn-row row">
        <button class="col-2 show-client-btn btn-active">All</button>
        <button class="col-2 show-client-btn">Media</button>
    </div>
    <div class="modal-body-dialog">
        
        <div class="client-row row">
            <img class="client-avatar-dialog col-3 rounded-circle" src="/default-avatar.png"/>
            <span class="client-name-dialog col-7">Tri</span>
        </div>
        <div class="client-row row">
            <img class="client-avatar-dialog col-3 rounded-circle" src="/default-avatar.png"/>
            <span class="client-name-dialog col-7">Hai</span>
        </div>
    </div>
    <form method="dialog">
    </form>
</dialog>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/chat").build();
    var notiConnection = new signalR.HubConnectionBuilder().withUrl("/notification").build();

    connection.on("ReceiveMessage", function (user, message) {
        document.getElementById("messages").appendChild(convertMessageToListItem(message));
        scrollMessagesToBottom();
    });
    
    
//<<<<<<< HEAD
    
//=======
    notiConnection.start().then(() => {
        console.log("Notification server connected.")
    }).catch(function (error){
        console.error(error);
    })
//>>>>>>> 8a3e9873fb4f0691b39bad03746b2dc9c286ca39

    connection.start().then(function () {
        console.log("SignalR Connected");
    }).catch(function (err) {
        return console.error(err.toString());
    });

    connection.on("InitializeChat", function (chatBoxes) {
        
        document.getElementById("chatBoxtList").innerHTML = "";
        chatBoxes.forEach(function (chatBox) {
            var li = document.createElement("li");
                     
            console.log(chatBox.ChatBoxName);
            // Create the image element
            var img = document.createElement("img");            
            img.src = chatBox.chatBoxAvatar ?? "/default-avatar.png";
            img.className = "avatar";

            // Create the span element for the text
            var span = document.createElement("span");
            span.className = "fs-5 fw-semibold";
            span.innerHTML = chatBox.chatBoxName ;

            // Append the elements to construct the HTML structure
          
            li.appendChild(img);           
            li.appendChild(span);
            li.addEventListener("click", function () {
                requestMessagesForChatBox(chatBox);
            });

            // Append the list item to the chat box list
            
            document.getElementById("chatBoxtList").appendChild(li);
        });
    });
       

    function sendButtonClickHandler(event) {
        var chatBoxId = document.getElementById("sendButton").getAttribute("data-chatBoxId");
        var message = document.getElementById("messageInput").value;
      
        if (message !== "") { // Check if message is not empty
            connection.invoke("SendMessage", chatBoxId, message).catch(function (err) {
                return console.error(err.toString());
            });
        }

        document.getElementById("messageInput").value = "";
        event.preventDefault();
    }

    //search for chatbox
    function searchChatButtonClickHandler(event) {
     
        var searchString = document.getElementById("searchChatInput").value;
        connection.invoke("SearchByChatBoxName", searchString).catch(function (err) {
            return console.error(err.toString());
        });
        document.getElementById("searchChatInput").value = "";
        event.preventDefault();
    }

    function requestMessagesForChatBox(chatBox) {
   
        var chatHeader = document.getElementById("chat-title");
        chatHeader.innerHTML = "";
        var img = document.createElement("img");
        img.src = chatBox.chatBoxAvatar ?? "/default-avatar.png";
        img.className = "avatar show-clients";
        // Create the span element for the text
        var span = document.createElement("span");
        span.className = "fs-5 fw-semibold";
        span.innerHTML = chatBox.chatBoxName;

        // Append the elements to construct the HTML structure
        chatHeader.appendChild(img);
        chatHeader.appendChild(span);
        connection.invoke("GetMessages", chatBox.chatBoxId).then(function (messages) {
            // Handle received messages
            displayMessages(messages);
        }).catch(function (err) {
            return console.error(err.toString());
        });
        // Remove the existing click event listener for the send button
        document.getElementById("sendButton").removeEventListener("click", sendButtonClickHandler);

        // Add a new click event listener for the send button
        document.getElementById("sendButton").addEventListener("click", sendButtonClickHandler);

        // Set the chatBoxId as a data attribute on the sendButton element
        document.getElementById("sendButton").setAttribute("data-chatBoxId", chatBox.chatBoxId);

        //Add click event to show clients in chat box
        const showClient = document.getElementsByClassName("show-clients")[0];
        const clientsDialog = document.getElementById("show-clients-dialog");
        showClient.addEventListener("click", () => {
            //check type of chat box
            console.log(chatBox);
            if(chatBox.chatBoxType == "TwoPerson"){
                window.location.href = `/Profile?id=${chatBox.clientId}`
            }
            else {
                clientsDialog.showModal();
                connection.invoke("GetClientsOfChatBox", chatBox.chatBoxId).catch(function (err) {
                    return console.error(err.toString());
                });
            }
        });
    }

    // Function to display messages on the UI
    function displayMessages(messages) {
        var messagesList = document.getElementById("messages");
        messagesList.innerHTML = ""; // Clear previous messages

        // I created a function to render a single message instead of a list of messages
        // which may be easier to reuse
        messages.forEach(msg => messagesList.append(convertMessageToListItem(msg)));
        scrollMessagesToBottom();
    }
    
    function convertMessageToListItem(message) {
        // Create a new list item for each message
        const li = document.createElement("li");
     
        // check if the message belongs to the current client (after logging in userId is stored in cookie)
        // this code is unsafe because it assumes there is only one cookie value which is the userId
        // in fact, it should check for all key and value pairs
       
        message.isYourOwnMess && li.classList.add('self-msg');
        
        // add avatar, the image is a placeholder, replace the image's source with client's avatar
        const imgAvatar = document.createElement("img");
        imgAvatar.src = message.senderAvatar;
        imgAvatar.alt = "User avatar";
        imgAvatar.height = 40;
        imgAvatar.width = 40;
        imgAvatar.classList.add("rounded-circle");
        
        const spanMessageContent = document.createElement("span");
        spanMessageContent.textContent = message.content;
        
        const smallTime = document.createElement("small");
        smallTime.textContent = new Date(message.sentDate).toLocaleTimeString();
        smallTime.classList.add("align-self-end");
        
        // this element should be a div, but I have to rewrite my css if I do so I decided to keep it as a span
        const spanContainer = document.createElement("span");
        spanContainer.classList.add("d-flex", "flex-column");
        spanContainer.appendChild(spanMessageContent);
        spanContainer.appendChild(smallTime);
        
        if (message.isYourOwnMess) {
            // message to the left, avatar to the right
            li.appendChild(spanContainer);
            li.appendChild(imgAvatar);
        } else {
            // message to the right, avatar to the left
            li.appendChild(imgAvatar);
            li.appendChild(spanContainer);
        }
        
        li.classList.add("d-flex", message.isYourOwnMess ? "justify-content-end" : "justify-content-start", "align-items-center", "gap-2");

        return li;
    }
    
//<<<<<<< HEAD
//=======
     notiConnection.on("ReceiveNotification", (notifications, connectionId) => {
            console.log("Received notification: ", notifications);
            console.log("connection id",connectionId);
            countUnreadNotifications(notifications);
            renderNotifications(notifications);
    });
    
    
    
    function renderNotifications(notifications) {
        var notificationBox = document.getElementById("notification");
        notificationBox.innerHTML = ""; // Clear existing notifications
        notifications.forEach(function(notification) {
            // Create notification item
            var notificationItem = document.createElement("div");
            notificationItem.style.marginBottom = "20px";
            notificationItem.classList.add("notification-item","d-flex","align-item-center");
          
    
            // Create avatar
            var avatar = document.createElement("img");
            avatar.classList.add("avatar","rounded-circle");
            avatar.src = notification.clientAvatar; // Avatar URL from the JSON
            avatar.alt = "Notification Avatar";
    
            // Create notification content
            var notificationContent = document.createElement("div");
            notificationContent.classList.add("notification-content","d-flex","flex-column","align-items-center");
            notificationContent.style.marginLeft = "30px";
            var description = document.createElement("h6");
            description.classList.add("description");
            description.textContent = notification.message;
    
            var time = document.createElement("p");
            time.classList.add("time");
            time.textContent = notification.sentAt; // Assuming the time is received from the server
            // Append elements
            notificationContent.appendChild(description);
            notificationContent.appendChild(time);
    
            notificationItem.appendChild(avatar);
            notificationItem.appendChild(notificationContent);
    
            notificationBox.appendChild(notificationItem);
        });
    }

    function showNotification(){
        var notificationBox  = document.getElementById("notification");
        var unreadCount = document.getElementById("unreadCount");
        unreadCount.style.visibility = "hidden";
        if (notificationBox.style.display === "none" || notificationBox.style.display === "") {
            notificationBox.style.display = "block";
        } else { 
            notificationBox.style.display = "none";
        }
        notiConnection.send("UpdateNotificationStatus").then(()=>{console.log("Read Noti")}).catch(function (error) {
                console.error(Error)
        });
    }
    function countUnreadNotifications(notifications) {
        var unreadCount = document.getElementById("unreadCount");
        var x = notifications.reduce((count, notification) => !notification.isRead ? count + 1 : count, 0);
        unreadCount.innerHTML = x !== 0 ? x : '';
    }
//>>>>>>> 8a3e9873fb4f0691b39bad03746b2dc9c286ca39

    //show clients members for group chatbox
    connection.on("ShowClientsOfChatBox", (clients) => {
        console.log(clients);
        displayClients(clients)
    })

    function displayClients(clients){
        const dialogBody = document.getElementsByClassName("modal-body-dialog")[0];
        let leaderExist = false;
        dialogBody.innerHTML = "";
        clients.forEach((client) => {
            if(!leaderExist && client.inChatboxes[0].isModerator){
                dialogBody.innerHTML += `
                <div class="client-row row">
                    <a href="/Profile?id=${client.id}" class="col-3"><img class="client-avatar-dialog rounded-circle" src="${client.profilePicture ?? '/default-avatar.png'}"/></a>
                    <div class="client-name-dialog col-7">
                        <div>${client.name}</div>
                        <span class="leader-tag">Leader</span>
                    </div>
                </div>
                `;
                leaderExist = true;
                console.log("leader");
                return;
            }
            console.log("normal");
            //else if(leaderExist){
                dialogBody.innerHTML += `
                <div class="client-row row">
                    <a href="/Profile?id=${client.id}" class="col-3"><img class="client-avatar-dialog rounded-circle" src="${client.profilePicture ?? '/default-avatar.png'}"/></a>
                    <div class="client-name-dialog col-7">
                        <div>${client.name}</div>
                    </div>
                </div>
                `;
            //}
           })
    }
    
    const scrollMessagesToBottom = () => {
        const ulMessages = document.getElementById("messages");
        ulMessages.scrollTop = ulMessages.scrollHeight;
     }
    
    
</script>
<script src="/js/viewListClientsInChat.js"/>

