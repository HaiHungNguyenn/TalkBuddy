@page
@using TalkBuddy.Presentation.Components
@model TalkBuddy.Presentation.Pages.Moderator.EditProfile

@{
    Layout = "Shared/_PrivateLayout";
}

<style>
    :root {
        --main-purple: #e4e7f5;
    }

    .profile-container {
        background-color: #e4e7f5;
        height: 100%;
    }

    .profile-picture {
        width: 150px;
        display: block;
        margin: 10px 0;
    }

    .edit-profile-row {
        background: linear-gradient(#41404F, #41404F 50%, white 50%, white);
        background-size: 100% 200%;
        background-position: 100% 100%;
        transition: background 1s;
        border-radius: 2%/6%;
    }

    .image-row {
        background: var(--main-purple);
        justify-content: space-between;
        position: relative;
    }

    .input-after {
        color: #47499D;
        font-size: 20px;
        max-height: 30px;
        transition: opacity 1s;
    }

    .disappear {
        opacity: 0;
        display: none;
    }

    .switch-input-btn {
        border: none;
        padding: 8px;
        width: 92px;
        border-radius: 0 0 8% 50%;
        position: absolute;
        right: 0%;
        height: 50px;
        top: 101%;
        z-index: 5;
        background: #00e4e3;
        transition: top 1s;
    }

    .save-btn {
        border: none;
        padding: 8px;
        width: 140px;
        border-radius: 0 0 8% 8%;
        position: relative;
        right: -41%;
        height: 53px;
        z-index: 5;
        background: #47499D;
        transition: opacity 1s;
        opacity: 0;
        cursor: default;
    }

    .save-btn-show {
        opacity: 1;
        cursor: pointer;
    }

    #form-card {
        transition: color 1s;
    }


    .background-go-down {
        background-position: 100% 0%;
    }

    .btn-go-down {
        top: 386%;
    }

    .switch-svg {
        width: 100%;
        height: 100%;
    }

    .input-round {
        border-radius: 2%/50%;
        height: 50px;
        font-size: 16px;
        transition: opacity 1s;
    }

</style>

<link rel="stylesheet" href="~/Edit-Profile.cshtml.css" />
<link rel="stylesheet" href="~/css/header.css">
<section class="h-100 w-100 d-flex flex-column">
    <component type="typeof(Header)" render-mode="Static"/>
    <div class="profile-container p-4">
        <div class="row image-row">
            <img src="@Model.ProfilePicture" class="profile-picture rounded-circle" alt="Profile Picture"/>
            <button class="switch-input-btn">
                <img class="switch-svg" src="~/img/chevron-down.svg" alt="User avatar"/>
            </button>
        </div>
        <div class="row edit-profile-row form-bg-color h-50vh justify-content-center rounded-3">
        <div id="form-card" class="card-body rounded-3" style="background-color: #00e4e3;">
        <h5 class="card-title">Profile</h5>
        <form id="profile-form" method="post">
        <input type="hidden" name="CurrentUser.Id" value="@Model.CurrentUser.Id" />
        <input type="hidden" name="CurrentUser.ProfilePicture" value="@Model.CurrentUser.ProfilePicture" />
        <input type="hidden" name="CurrentUser.Password" value="@Model.CurrentUser.Password" />
        <div class="form-group mb-3">
        <label for="floatingInput">Name</label>
        <p class="input-after">@Model.CurrentUser.Name</p>
        <input name="CurrentUser.Name" type="text" class="form-control input-round disappear" id="floatingInput" placeholder="Name" 
        value="@Model.CurrentUser.Name"> 
        <span asp-validation-for="@Model.CurrentUser.Name" class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
        <label for="floatingInput">Email address</label>
        <p class="input-after">@Model.CurrentUser.Email</p>
        <input name="CurrentUser.Email" type="email" class="form-control input-round disappear" id="floatingInput" placeholder="name@example.com"
        value="@Model.CurrentUser.Email">
        <span asp-validation-for="@Model.CurrentUser.Email" class="text-danger"></span>
        </div>
                                                                                                   
        <div class="form-group mb-3">
        <label for="floatingPassword">Date of birth</label>
        <p class="input-after">@Model.CurrentUser.DateOfBirth</p>
        <input name="CurrentUser.DateOfBirth" type="datetime-local" class="form-control input-round disappear" id="floatingPassword" value="@Model.CurrentUser.DateOfBirth">
        <span asp-validation-for="@Model.CurrentUser.DateOfBirth" class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
        <label for="floatingPassword">Gender</label>
        <p class="input-after">@Model.CurrentUser.Gender</p>
        <input name="CurrentUser.Gender" type="text" class="form-control input-round disappear" id="floatingPassword" placeholder="Gender"
        value="@Model.CurrentUser.Gender">
        <span asp-validation-for="@Model.CurrentUser.Gender" class="text-danger"></span>
        </div>
                                                                                                   
                                                                                                   
        @foreach (var modelState in ViewData.ModelState.Values)
        {
        foreach (var error in modelState.Errors)
        {
        <div>@error.ErrorMessage</div>
        }
        }
                                                                                                   
        </form>
        </div>
        </div>
        <button class="save-btn">
            <img class="switch-svg" src="~/img/save.svg" alt="Save button"/>
        </button>
    </div>
</section>

<script>
    //set date input
    let dateTime = document.querySelector("input[type=datetime-local]");
    var inputDate = new Date("@Model.CurrentUser.DateOfBirth"+" UTC");
    var outputStr = inputDate.toISOString().slice(0, 16);
    dateTime.value = outputStr;

    let switchModeBtn = document.getElementsByClassName("switch-input-btn")[0];
       switchModeBtn.addEventListener("click", () => {
        let editProfileRow = document.getElementsByClassName("edit-profile-row")[0];
        let formCard = document.getElementById("form-card");
        let inputs = document.getElementsByClassName("input-round");
        let details = document.getElementsByClassName("input-after");

        formCard.classList.toggle("text-white");
        switchModeBtn.classList.toggle("btn-go-down");
        editProfileRow.classList.toggle("background-go-down");
        for(let i=0;i<inputs.length;i++){
            inputs[i].classList.toggle("disappear");
            details[i].classList.toggle("disappear");
        }
        
        let switchSvg = document.getElementsByClassName("switch-svg")[0];
        const saveBtn = document.getElementsByClassName("save-btn")[0];
        switchModeBtn.classList.toggle("up-btn");
        if(switchModeBtn.classList.contains("up-btn")){
            switchSvg.setAttribute("src", "/img/chevron-up.svg");
            const form  = document.getElementById("profile-form");
            saveBtn.classList.toggle("save-btn-show");
            saveBtn.addEventListener("click", () => {
                form.submit();
            })
        }
        else{
            switchSvg.setAttribute("src", "img/chevron-down.svg");
            saveBtn.classList.toggle("save-btn-show");
        }     
    });

    
</script>
